// <auto-generated />
using System;
using CQRS.Pattern.Infastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CQRS.Pattern.Infastructure.Migrations
{
    [DbContext(typeof(CQRSDbContext))]
    [Migration("20240323172454_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = "CHQ",
                            Balance = 100.00m,
                            Currency = "USD",
                            Email = "fake.user@gmail.com",
                            IsDefault = true
                        },
                        new
                        {
                            Id = 2,
                            AccountType = "SAV",
                            Balance = 1700.00m,
                            Currency = "CAD",
                            Email = "fake.user@gmail.com",
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "fake.user@gmail.com",
                            Firstname = "Fake",
                            Lastname = "User",
                            Password = "$2a$11$p1hp3ziOwBB16hp6p/.BQuNPFoln2Wnu2DAK/THPI3OmK.GljoYW."
                        });
                });

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1200.00m,
                            CustomerId = 1,
                            Dated = new DateTime(2024, 3, 23, 13, 24, 54, 410, DateTimeKind.Local).AddTicks(5897),
                            Number = "5b8dd171-b6f5-4301-b7ef-df27960c6382"
                        });
                });

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderTransactionId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1200.00m,
                            Currency = "USD",
                            Date = new DateTime(2024, 3, 23, 13, 24, 54, 410, DateTimeKind.Local).AddTicks(5761),
                            Description = "SaaS Sub. 1yr",
                            Email = "fake.user@gmail.com",
                            ProviderName = "Stripe",
                            ProviderTransactionId = "115e962d-3c43-4445-b638-d994b31dd41e"
                        });
                });

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 2,
                            Amount = 500.00m,
                            Currency = "CAD",
                            Date = new DateTime(2024, 3, 23, 13, 24, 54, 410, DateTimeKind.Local).AddTicks(5632),
                            Description = "ACC Opening Tran.",
                            IsDebit = false
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            Amount = 100.00m,
                            Currency = "USD",
                            Date = new DateTime(2024, 3, 23, 13, 24, 54, 410, DateTimeKind.Local).AddTicks(5701),
                            Description = "ACC Opening Tran.",
                            IsDebit = false
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 2,
                            Amount = 1200.00m,
                            Currency = "USD",
                            Date = new DateTime(2024, 3, 23, 13, 24, 54, 410, DateTimeKind.Local).AddTicks(5870),
                            Description = "SaaS Sub. 1yr",
                            IsDebit = false
                        });
                });

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Invoice", b =>
                {
                    b.HasOne("CQRS.Pattern.Infastructure.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CQRS.Pattern.Infastructure.Models.Customer", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
